import React, { ReactNode } from "react";
import {
  IconButton,
  Avatar,
  Box,
  CloseButton,
  Flex,
  HStack,
  VStack,
  Icon,
  useColorModeValue,
  Link,
  Drawer,
  DrawerContent,
  Text,
  useDisclosure,
  BoxProps,
  FlexProps,
  Menu,
  MenuButton,
  MenuItem,
  MenuList,
} from "@chakra-ui/react";
import {
  FiHome,
  FiSettings,
  FiMenu,
  FiBell,
  FiChevronDown,
  FiUsers,
  FiBriefcase,
} from "react-icons/fi";
import { MdOutlineAccountBalanceWallet } from "react-icons/md";
import { FaHandHoldingUsd } from "react-icons/fa";
import { MdPayments } from "react-icons/md";
import { IoReceiptSharp } from "react-icons/io5";
import { GrOrganization } from "react-icons/gr";
import { GiProcessor } from "react-icons/gi";
import { RiRefund2Line } from "react-icons/ri";
import { IconType } from "react-icons";
import Head from "next/head";
import LogoImage from "./LogoImage";
import NextLink from "next/link";
import { useAppDispatch, useAppSelector } from "@/hooks/reduxHooks";
import { useGetUserProfileQuery } from "@/redux/api/profileApiSlice";
import { useRouter } from "next/router";
import { logoutUser, setToken, setUser } from "@/redux/authSlice";
import { setWallet } from "@/redux/walletSlice";
import AppLoader from "./AppLoader";
import { taxitPayApi } from "@/redux/apiSlice";
import useBusinessCheck, { UserPermissions } from "@/hooks/useBusinessCheck";
import useNewUserCheck from "@/hooks/useNewUserCheck";
import capitalize from "src/helpers/capitalize";
import checkUserRole from "src/helpers/checkUserRole";

interface LinkItemProps {
  name: string;
  icon: IconType;
  link: string;
}

const LinkItems: Array<LinkItemProps> = [
  { name: "Dashboard", icon: FiHome, link: "/" },
  { name: "Wallet", icon: MdOutlineAccountBalanceWallet, link: "/wallet" },
  {
    name: "Transactions",
    icon: GiProcessor,
    link: "/transactions",
  },
  {
    name: "Refunds",
    icon: RiRefund2Line,
    link: "/refunds",
  },
  { name: "Users", icon: FiUsers, link: "/users" },
  { name: "PFAs", icon: FiBriefcase, link: "/pfas" },
  { name: "Pension", icon: FaHandHoldingUsd, link: "/pension" },
  { name: "Payroll", icon: MdPayments, link: "/payroll" },
  { name: "Payslip", icon: IoReceiptSharp, link: "/payslip" },
  { name: "Settings", icon: FiSettings, link: "/settings" },
  { name: "Companies", icon: GrOrganization, link: "/companies" },
];

export default function SidebarWithHeader({
  children,
  headText,
  noHeader,
  permissions,
}: {
  children: ReactNode;
  headText?: string;
  noHeader?: boolean;
  permissions?: UserPermissions[];
}) {
  const { isOpen, onOpen, onClose } = useDisclosure();
  const bgColor = "white";
  const dispatch = useAppDispatch();
  
  const { data, isLoading, isError } = useGetUserProfileQuery(undefined);

  if (data) {
    dispatch(setUser(data.data));
    dispatch(setToken(data.data.token));
    dispatch(setWallet(data.data.wallet));
  }

  // useBusinessCheck(permissions);
  // useNewUserCheck();

  return (
    <>
      {isLoading ? (
        <AppLoader />
      ) : data ? (
        <Box minH='100vh' bg={bgColor}>
          <Head>
            <title>{headText || "TaxitPay Admin"}</title>
            <meta name='description' content='Generated by create next app' />
            <link rel='shortcut icon' href='images/favicon.png' />
          </Head>

          <SidebarContent
            onClose={() => onClose}
            display={{ base: "none", md: "block" }}
          />

          <Drawer
            autoFocus={false}
            isOpen={isOpen}
            placement='left'
            onClose={onClose}
            returnFocusOnClose={false}
            onOverlayClick={onClose}
            size='sm'
          >
            <DrawerContent>
              <SidebarContent onClose={onClose} />
            </DrawerContent>
          </Drawer>

          {/* mobile-nav */}
          <MobileNav onOpen={onOpen} />

          <Box ml={{ base: 0, md: 60 }} p='4'>
            {children}
          </Box>
        </Box>
      ) : (
        <></>
      )}
    </>
  );
}

interface SidebarProps extends BoxProps {
  onClose: () => void;
}

const SidebarContent = ({ onClose, ...rest }: SidebarProps) => {
  const user = useAppSelector((state) => state.auth.user);
  const userRole = user?.roles;

  return (
    <Box
      transition='3s ease'
      bg={useColorModeValue("white", "gray.900")}
      borderRight='1px'
      borderRightColor={useColorModeValue("gray.200", "gray.700")}
      w={{ base: "full", md: 60 }}
      pos='fixed'
      h='full'
      {...rest}
    >
      <Flex h='20' alignItems='center' mx='8' justifyContent='space-between'>
        <LogoImage />
        <CloseButton display={{ base: "flex", md: "none" }} onClick={onClose} />
      </Flex>

      {LinkItems.map((link) => (
        <NavItem key={link.name} icon={link.icon} link={link.link}>
          {link.name}
        </NavItem>
      ))}

      {/* {user?.roles ? (
        <>
          <NavItem
            key={LinkItems[0].name}
            icon={LinkItems[0].icon}
            link={LinkItems[0].link}
          >
            {LinkItems[0].name}
          </NavItem>
        </>
      ) : (
        <>
          {LinkItems.map((link) => (
            <NavItem key={link.name} icon={link.icon} link={link.link}>
              {link.name}
            </NavItem>
          ))}
        </>
      )} */}
    </Box>
  );
};

interface NavItemProps extends FlexProps {
  icon: IconType;
  children: ReactNode;
  link: string;
}

const NavItem = ({ icon, children, link, ...rest }: NavItemProps) => {
  const router = useRouter();

  const isActive =
    router.pathname === "/"
      ? link === router.pathname
      : link.startsWith(router.pathname);

  return (
    <NextLink href={link} passHref>
      <Link style={{ textDecoration: "none" }} _focus={{ boxShadow: "none" }}>
        <Flex
          align='center'
          p='4'
          mx='4'
          mb='4'
          borderRadius='lg'
          role='group'
          cursor='pointer'
          bg={isActive ? "greenTwo" : "transparent"}
          color={isActive ? "white" : "black"}
          _hover={{
            bg: isActive ? "greenTwo" : "#bbb",
            color: "white",
          }}
          {...rest}
        >
          {icon && (
            <Icon
              mr='4'
              fontSize='16'
              _groupHover={{
                color: "white",
              }}
              as={icon}
            />
          )}
          {children}
        </Flex>
      </Link>
    </NextLink>
  );
};

interface MobileProps extends FlexProps {
  onOpen: () => void;
}

const MobileNav = ({ onOpen, ...rest }: MobileProps) => {
  const user = useAppSelector((state) => state.auth.user);
  const dispatch = useAppDispatch();
  const router = useRouter();

  const logout = () => {
    try {
      dispatch(logoutUser());

      if (typeof window !== undefined) {
        localStorage.removeItem("taxitPayToken");
        sessionStorage.removeItem("taxitPayToken");
      }

      taxitPayApi.util.invalidateTags(["Profile"]);
      router.reload();
    } catch (error) {
      console.log(error);
    }
  };

  const MenuOptions = [
    {
      title: "Profile",
      action: () => router.push("/settings?tab=profile", "/settings"),
      color: "greyOne",
    },

    {
      title: "Team",
      action: () => router.push("/settings?tab=team", "/settings"),
      color: "greyOne",
    },

    {
      title: "Billing",
      action: () => router.push("/settings?tab=billing", "/settings"),
      color: "greyOne",
    },

    {
      title: "Sign Out",
      action: logout,
      color: "greyOne",
    },
  ];

  return (
    <Flex
      ml={{ base: 0, md: 60 }}
      px={{ base: 4, md: 4 }}
      height='20'
      alignItems='center'
      bg={useColorModeValue("white", "gray.900")}
      borderBottomWidth='1px'
      borderBottomColor={useColorModeValue("gray.200", "gray.700")}
      justifyContent={{ base: "space-between", md: "flex-end" }}
      {...rest}
    >
      <IconButton
        display={{ base: "flex", md: "none" }}
        onClick={onOpen}
        variant='outline'
        aria-label='open menu'
        icon={<FiMenu />}
      />

      <HStack spacing={{ base: "0", md: "6" }}>
        {/* <ColorModeSwitcher /> */}
        <IconButton
          size='lg'
          variant='ghost'
          aria-label='open menu'
          icon={<FiBell />}
        />
        <Flex alignItems={"center"}>
          <Menu>
            <MenuButton
              py={2}
              transition='all 0.3s'
              _focus={{ boxShadow: "none" }}
            >
              <HStack>
                <Avatar
                  size={"sm"}
                  src={
                    "https://images.unsplash.com/photo-1619946794135-5bc917a27793?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&s=b616b2c5b373a80ffc9636ba24f7a4a9"
                  }
                />
                <VStack
                  display={{ base: "none", md: "flex" }}
                  alignItems='flex-start'
                  spacing='1px'
                  ml='2'
                >
                  <Text fontSize='sm'>
                    {user?.entity_name ?? user?.entity_name ?? user.name}
                  </Text>

                  {user?.roles ? (
                    <Text fontSize='xs' color='gray.600'>
                      {user?.roles.includes("admin")
                        ? capitalize(user.roles[0])
                        : capitalize(user?.roles[1])}
                    </Text>
                  ) : // <Text fontSize='xs' color='gray.600'>
                  //   Admin
                  // </Text>
                  null}
                </VStack>
                <Box display={{ base: "none", md: "flex" }}>
                  <FiChevronDown />
                </Box>
              </HStack>
            </MenuButton>
            <MenuList
              bg={useColorModeValue("white", "gray.900")}
              borderColor={useColorModeValue("gray.200", "gray.700")}
            >
              {MenuOptions.map((item, index) => (
                <MenuItem key={index} onClick={item.action} color={item.color}>
                  {item.title}
                </MenuItem>
              ))}
            </MenuList>
          </Menu>
        </Flex>
      </HStack>
    </Flex>
  );
};
